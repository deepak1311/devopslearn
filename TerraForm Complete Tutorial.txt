TerraForm
---------
    --> Infrastructure as a code


1. Create EC2 Instance "TERRAFORM"
----------------------------------


2.Installation
--------------
   1. Open www.terraform.io --> downloads --> select OS
   2. Download the zip file --> extract the zip file
   3. Configure the path
------------------------
          --> open "TERRAFORM" instance
              -------------------------
                    --> sudo su -
                    --> cd /opt
                    --> wget https://releases.hashicorp.com/terraform/0.14.8/terraform_0.14.8_linux_amd64.zip
                    --> unzip terraform_0.14.8_linux_amd64.zip

          --> set "PATH" 
              ---------
                 PATH=${PATH}:/opt (Temp)
                 
                 --> cd ~              (Permanent)
                 --> vi ./bash_profile
                 --> append with path



3. Terraform Basics
-------------------
    --> mkdir terraworkspace
    --> cd terraworkspace
  
    1. Terraform File
---------------------
         --> Create an file with .tf ext : "firstfile.tf"
         --> terraform init
         
    2. Importand command
------------------------
         --> terraform plan      : will make a dry run
         --> terraform apply     : will check any thing need to apply
         --> terraform destroy   : will destroy the infrasturcture

    3. .tfstate && tfstate.backup
---------------------------------
         --> will maintain the track of infrasturcture so when you
               modify the tf file it will compare the tfstate file
                and create the resources
         
         --> we can maintain the tfstate file in s3 or scm



4. Different ways to give access to tf
--------------------------------------
    
   1. Open the "firstfile.tf"
-----------------------------
        provider "aws" {
            region = "eu-west-1"
            access_key = "AKIA3XW5YABAEZTZA4HP"
            secret_key = "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"  
        }
            
                   [OR]

        provider "aws" {
            region = "eu-west-1"
            profile = "<profile Name>" 
        }


       --> terraform int  : because we added provider it will download the dependent file

   
   2. Terraform Variables
-------------------------
         1. Strings
         ----------
              variable "stringexample" {
                    type = "string"
                    default = "value"  //for multiline//  <<EOH
                                                             this is   
                                                              multiline string    
                                                            EOH
              }             

            To consume :
                   output "myfirstoutput" {
                         value = "${var.key}"
                   }           
 

         2. Maps
         -------
             variable "mapexample" {
                   type = "map"
                   default = {
                         "useast" = "ami1"
                         "uswest" = "ami2"
                   }
             }


            To consume :
                   output "mapoutput" {
                        value = "${var.mapexample["useast"]}"
                   }


         3. Lists
         --------
             variable "listexample" {
                   type = "list"
                   default = ["sg1", "sg2", "sg3"]
             }

            To consume :
                   output "listoutput" {
                        value = "${var.listexample[0]}"  // for all//  "${var.listexample}"
                   }


         4. Booleans
         -----------
             variable "booleanexample" {
                   default = true
             }

            To consume :
                   output "booleanoutput" {
                        value = "${var.booleanexample}"
                   }  


5. Input && Output
------------------
    
     1. Input
-------------
         variable "inputexample" {
              type = "string"
         }   

     2. Output
--------------
           output "outputexample" {
                sensitive = true                // will not display the data in console
                value = "${var.inputexample}"   // prompt to enter the value in console
           }            



6. Basic AWS Components
-----------------------
      
      1. S3
-----------   
         1. Create S3 bucket
         --------------------
               --> mkdir s3
               --> vi mains3.tf
                   ------------
                         provider "aws" {
                            region = "eu-west-1"
                            access_key = "AKIA3XW5YABAEZTZA4HP"
                            secret_key = "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"  
                         }
 
                         resource "aws_s3_bucket" "mybucket" {
                            bucket = "mybucke-101018"
                            acl = "private"
                           
                            tags {
                              Environmnet = "DEV"
                            }
                         }

               --> terraform init
               --> terraform plan
               --> terraform apply


         2. Upload file to S3 bucket
         ---------------------------
                         resource "aws_s3_bucket_object" "objectone" {
                            bucket ="${aws_s3_bucket.mybucket.id}"       // need to specify bucket name    
                            key = "testfile.txt"
                            source = "../testfiles/sampleobject.txt"
                            etag = "${md5(file("../testfiles/sampleobject.txt"))}"
                         }


         3. Destroy the resource
         -----------------------
                         --> terraform destroy
                         


      2. EC2
------------
        
         1. Create Security Grroup
         -------------------------
               variable "vpcid" {
                  type = "string"
                  default = "vpc-2c934955"    // default vpc id or your own vpc id
               }

               resource "aws_security_group" "terrasg" {
                  name = "terrasg"
                  description = "teraaform security group"
                  vpc_id = "${var.vpcid}"
               } 
             
               ingress {
                  from_port = 22
                  to_port = 22
                  protocol = "TCP"
                  cidr_blocks = ["0.0.0.0/0"]
               }

               egress {
                  from_port = 0
                  to_port = 0
                  protocol = "-1"
                  cidr_blocks = ["0.0.0.0/0"]
               }
        

         2. Create EC2
         --------------
               
               vraiable "amiid" {
                  type = "string"
                  default = "ami-047bb4163c506cd98"
               }

               resource "aws_instance" "terrainstance" {
                  ami = "${var.ammiid}"
                  instance_type = "t2.micro"
                  key_name = "oregon-keypair"
                  vpc_security_group_ids =["${aws_secuirty_group.terrasg.id}]
               
                  tags {
                     Name = "terrainstance"
                  }
               } 






7. Terraform Modules
--------------------
         
         1. Creating Modules - local(mkdir moduleexample)
----------------------------
               create foled module1
               --------------------
                   vi ec2module.tf
                   ---------------
                            variable "amiid" {
                                   type = "string"
                                   default = "ami-047bb4163c506cd98"
                            }
                         
                            variable "sgid" {}
                            variable "ec2_name" {}

                            resource "aws_instance" "terrainstance" {
                                    ami = "${var.ammiid}"
                                    instance_type = "t2.micro"
                                    key_name = "oregon-keypair"
                                    vpc_security_group_ids =["${var.sgid}]
               
                                    tags {
                                       Name = "${var.ec2_name}"
                                    }
                            }

               create foled module2
               --------------------
                   vi sgmodule.tf
                   ---------------
                            variable "vpcid" {
                                  type = "string"
                                  default = "vpc-2c934955"    // default vpc id or your own vpc id
                            }

                            resource "aws_security_group" "terrasg" {
                                   name = "terrasg"
                                   description = "teraaform security group"
                                   vpc_id = "${var.vpcid}"
                            } 
             
                            ingress {
                                   from_port = 22
                                   to_port = 22
                                   protocol = "TCP"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }

                            egress {
                                   from_port = 0
                                   to_port = 0
                                   protocol = "-1"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }


                            output "sgidoutput" {
                                 value = "${aws_secuirty_group.terrasg.id}"
                            } 

               vi terramodule.tf
               -----------------
                         provider "aws" {
                            region = "eu-west-1"
                            access_key = "AKIA3XW5YABAEZTZA4HP"
                            secret_key = "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"  
                         }

                         module "sg_module" {
                            source = "./module2"
                         }

                         module "ec2_module" {
                            sgid = "${module.sg_module.sgidoutput}"
                            ec2_name = "ec2_module"
                            source = "./module1"
                         }



         2. Reuse of Modules
----------------------------

               vi terramodule.tf
               -----------------
                         provider "aws" {
                            region = "eu-west-1"
                            access_key = "AKIA3XW5YABAEZTZA4HP"
                            secret_key = "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"  
                         }

                         module "sg_module" {
                            source = "./module2"
                         }

                         module "ec2_module_1" {
                            sgid = "${module.sg_module.sgidoutput}"
                            ec2_name = "ec2_module_1"
                            source = "./module1"
                         }

                         module "ec2_module_2" {
                            sgid = "${module.sg_module.sgidoutput}"
                            ec2_name = "ec2_module_2"
                            source = "./module1"
                         }



         3. Multiple Environment
--------------------------------
                --> using workspace

                1. copy the previous project and rename it and do the changes
-----------------------------------------------------------------------------

               create foled module1
               --------------------
                   vi ec2module.tf
                   ---------------
                            variable "amiid" {
                                   type = "string"
                                   default = "ami-047bb4163c506cd98"
                            }
                         
                            variable "sgid" {}
                            variable "ec2_name" {}

                            resource "aws_instance" "terrainstance" {
                                    ami = "${var.ammiid}"
                                    instance_type = "t2.micro"
                                    key_name = "oregon-keypair"
                                    vpc_security_group_ids =["${var.sgid}]
               
                                    tags {
                                       Name = "${var.ec2_name}"
                                    }
                            }

               create foled module2
               --------------------
                   vi sgmodule.tf
                   ---------------
                            variable "vpcid" {
                                  type = "string"
                                  default = "vpc-2c934955"    // default vpc id or your own vpc id
                            }
                 
                            variable "sg_name" {}

                            resource "aws_security_group" "terrasg" {
                                   name = "${var.sg_name}"
                                   description = "teraaform security group"
                                   vpc_id = "${var.vpcid}"
                            } 
             
                            ingress {
                                   from_port = 22
                                   to_port = 22
                                   protocol = "TCP"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }

                            egress {
                                   from_port = 0
                                   to_port = 0
                                   protocol = "-1"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }


                            output "sgidoutput" {
                                 value = "${aws_secuirty_group.terrasg.id}"
                            } 
                
                2. Open terramodule
-----------------------------------

               vi terramodule.tf
               -----------------
                         provider "aws" {
                            region = "eu-west-1"
                            access_key = "AKIA3XW5YABAEZTZA4HP"
                            secret_key = "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"  
                         }

                         module "sg_module" {
                            sg_name = "sg_ec2_${local.env}"
                            source = "./module2"
                         }

                         module "ec2_module_1" {
                            sgid = "${module.sg_module.sgidoutput}"
                            ec2_name = "ec2_module_1_${local.env}"
                            source = "./module1"
                         }
 
                        locals {
                             env = "${terraform.workspace}"
                        }



                3. terraform workspace new staging
                   terraform workspace new prod
   
                   terraform workspace list

                4. Switching between workspace
----------------------------------------------
                    terraform workspace select staging
             
                5. terraform workspace list
                   terraform init
                   terraform plan
                   terraform apply



         4. Env Specific local variable
---------------------------------------


                        locals {
                             env = "${terraform.workspace}"

                             amiid_env {
                                  default = "amiid_default"
                                  staging = "amiid_staging"
                                  prod    = "amiid_prod"
                             }
                             
                             amiid = "${lookup(local.amiid_env, local.env}"
                        }

                        output "envspecoutvar" {
                            value = "${local.amiid}"
                        }



         5. Shared env variable across modules
----------------------------------------------

                  --> with above example create folder "shared_vars"
                  
                  vi shared_vars.tf
                  -----------------     

                        locals {
                             env = "${terraform.workspace}"

                             env_suffix_env {
                                  default = "staging"
                                  staging = "staging"
                                  prod    = "prod"
                             }
                             
                             env_suffix = "${lookup(local.env_suffix_env, local.env}"
                        }

                        output "env_suffix" {
                            value = "${local.env_suffix}"
                        }


                   vi ec2module.tf
                   ---------------
                            variable "amiid" {
                                   type = "string"
                                   default = "ami-047bb4163c506cd98"
                            }
    
                            module "sharedvars" {
                                source = "../shared_vars"
                            }
                         
                            variable "sgid" {}

                            resource "aws_instance" "terrainstance" {
                                    ami = "${var.ammiid}"
                                    instance_type = "t2.micro"
                                    key_name = "oregon-keypair"
                                    vpc_security_group_ids =["${var.sgid}]
               
                                    tags {
                                       Name = "EC2_name_Instance_${module.sharedvars.env_suffix}"
                                    }
                            }

                   vi sgmodule.tf
                   ---------------
                            variable "vpcid" {
                                  type = "string"
                                  default = "vpc-2c934955"    // default vpc id or your own vpc id
                            }
                 
                            module "sharevars" {
                                  source = "../shared_vars"
                            }

                            resource "aws_security_group" "terrasg" {
                                   name = "EC2_name_Instance_${module.sharedvars.env_suffix}"
                                   description = "teraaform security group"
                                   vpc_id = "${var.vpcid}"
                            } 
             
                            ingress {
                                   from_port = 22
                                   to_port = 22
                                   protocol = "TCP"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }

                            egress {
                                   from_port = 0
                                   to_port = 0
                                   protocol = "-1"
                                   cidr_blocks = ["0.0.0.0/0"]
                            }


                            output "sgidoutput" {
                                 value = "${aws_secuirty_group.terrasg.id}"
                            } 


               vi terramodule.tf
               -----------------
                         provider "aws" {
                            region = "eu-west-1"
                            access_key = "AKIA3XW5YABAEZTZA4HP"
                            secret_key = "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"  
                         }

                         module "sg_module" {
                            source = "./module2"
                         }

                         module "ec2_module_1" {
                            sgid = "${module.sg_module.sgidoutput}"
                            source = "./module1"
                         }
 
                        locals {
                             env = "${terraform.workspace}"
                        }



6. Sample Infrastructure
------------------------
     
       1. Security Group
       2. App Load Balancer && Target Groups
       3. Launch Congif with userdata
       4. Autoscaling group
       5. Relaunch in deifferent environment



Folder Structure SetUp
----------------------
    
       --> mkdir awsInfrastructure
       --> create file "main.tf"
       --> create folder for module "shared_vars"
            --> create "shared_vars.tf"
       --> create folder for module "network_module"
            --> create "network_module.tf"
       --> create folder for module "loadbalancer_module"
            --> create "loadbalancer_module.tf"
       --> create folder for module "autoscaling_module"
            --> create "autoscaling_module.tf"
       --> create folder "assets"
            --> create "userdata.txt"
                --------------------
                      #!/bin/bash
                      sudo su 
                      yum update -y
                      yum install httpd php -y
                      sudo service httpd start


       1. Open main.tf
       --------------
             provider "aws" {
                   region = "eu-west-1"
                   access_key = "AKIA3XW5YABAEZTZA4HP"
                   secret_key = "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"  
             }      
 
             module "network_module" {
                   source = "./network_module"
             }

             module "loadbalancer" {
                   source = "./loadbalancer_module"
                   publicsg_id = "${module.network_module.publicsg}"
             }

             module "autoscaling" {
                   source = "./autoscaling_module"
                   privatesg_id = "${module.network_module.privatesg_id}"
                   tg_arn = "${module.loadbalancer_module.tg_arn}"
             }

       2. Open shared_vars.tf
       ----------------------

             output "vpcid" {
                 value = "${local.vpcid}"
             }

             output "publicsubnetid1" {
                 value = "${local.publicsubnetid1}"
             }

             output "publicsubnetid2" {
                 value = "${local.publicsubnetid2}"
             }

             output "privatesubnetid" {
                 value = "${local.privatesubnetid}"
             }


             output "env_suffix" {
                 value = "${local.env}"
             }

             output "amiid" {
                 value = "${local.amiid}"
             }

             output "instancetype" {
                 value = "${local.instancetype_env}"
             }

             output "keypair" {
                 value = "${local.keypair_env}"
             }

             locals {
                   env = "${terraform.workspace}"

                   vpcid_env = {
                       default = "vpc-2c934955"
                       staging = "vpc-2c934955"
                       production = "vpc-2c934955"
                   }
           
                   vpcid  = "${lookup(local.vpcid_env, local.env}

                   publicsubnetid1_env = {
                       default = "subnet-4268942b"
                       staging = "subnet-4268942b"
                       production = "subnet-4268942b"
                   }
           
                   publicsubnetid1  = "${lookup(local.publicsubnetid1_env, local.env}

                   publicsubnetid2_env = {
                       default = "subnet-d65d699c"
                       staging = "subnet-d65d699c"
                       production = "subnet-d65d699c"
                   }
           
                   publicsubnetid2  = "${lookup(local.publicsubnetid2_env, local.env}

                   privatesubnetid_env = {
                       default = "subnet-9c9387e4"
                       staging = "subnet-9c9387e4"
                       production = "subnet-9c9387e4"
                   }
           
                   privatesubnetid  = "${lookup(local.privatesubnetid_env, local.env}


                   amiid_env = {
                       default = "ami-0b59bfac6be064b78"
                       staging = "ami-0b59bfac6be064b78"
                       production = "ami-0b59bfac6be064b78"
                   }
           
                   amiid  = "${lookup(local.amiid_env, local.env}

                   instancetype_env = {
                       default = "t2.micro"
                       staging = "t2.micro"
                       production = "t2.medium"
                   }
           
                   instancetype_env  = "${lookup(local.instancetype_env, local.env}

                   keypair_env = {
                       default = "<key-pair_name>"
                       staging = "<key-pair_name>"
                       production = "<key-pair_name>"
                   }
           
                   kaypair_env  = "${lookup(local.keypair_env, local.env}
             }



       3. Open network_module.tf
       -------------------------

             module "shared_vars" {
                   source = "../share_vars"
             }

             resource "aws_security_group" "public_sg" {
                   name = "publicsg_${module.shared_vars.env_suffix}"
                   description = "public security group for load balancer_${module.shared_vars.env_suffix}"
                   vpc_id = "${module.shared_vars.vpcid}"
             } 
             
             ingress {
                   from_port = 80
                   to_port = 80
                   protocol = "TCP"
                   cidr_blocks = ["0.0.0.0/0"]
             }

             egress {
                   from_port = 80
                   to_port = 80
                   protocol = "TCP"
                   cidr_blocks = ["0.0.0.0/0"]
             }


             resource "aws_security_group" "private_sg" {
                   name = "privatesg_${module.shared_vars.env_suffix}"
                   description = "private security group for load balance ${module.shared_vars.env_suffix}"
                   vpc_id = "${module.shared_vars.vpcid}"
             } 
             
             ingress {
                   from_port = 80
                   to_port = 80
                   protocol = "TCP"
                   security_group_s = ["${aws_security_group.publicsg.id}"]
             }

             egress {
                   from_port = 80
                   to_port = 80
                   protocol = "-1"
                   cidr_blocks = ["0.0.0.0/0"]
             }
 
             output "publicsgid" {
                   value = "${aws_security_group.publicsg.id}"
             }

             output "privatesgid" {
                   value = "${aws_security_group.privatesg.id}"
             }


       4. Open loadbalancer_module.ts
       ------------------------------

             variable publicsg_id {}

             module "shared_vars" {
                   source = "../shared_vars"
             }       

             resource "aws_lb" "loadbalancer" {
                   name  = "loadbalancer-${module.shared_vars.env_suffix}"
                   internal = false
                   load_balancer_type = "application"
                   securtiy_group = ["${var.publicsg_id}"]
                   subnets = ["${module.shared_vars.publicsubnetid1}", "${module.shared_vars.publicsubnetid2}"]

                   enable_deletion_protection = true

                   tags {
                      Environment = "${module.shared_vars.env_suffix}"
                   }
             }

             resource "aws_lb_target_group" "targetgroup" {
                   name = "targetgroup-${module.shared_vars.env_suffix}"
                   port = 80
                   protocol = "HTTP"
                   vpc_id = "${module.shared_vars.vpcid}"
             }

             output "tg_arn" {
                   value = "${aws_lb_target_group.targetgroup.arn}"
             }

              resource "aws_lb_listener" "http80" {
                    load_balancer_arn = "${aws_lb.loadbalancer.arn}"
                    port = "80"
                    protocol = "HTTP"
                   
                    default_action {
                        type = "forward"
                        target_group_arn = "${aws_lb_target_group.targetgroup.arn}"
                    }
             }


       5. Opem autoscaling_module.tf
       -----------------------------

             module "shared_vars" {
                   source = "../shared_vars"
             }  
           
             variable privatesg_id {}
             variable tg_arn {}         
 
             resource "aws_launch_configuration" "as_conf" {
                   name = "lc_${module.shared_vars.env_suffix}"
                   image_id = "${module.shared_vars.amiid}"
                   instance_type = "${module.shared_vars.instancetype_env}"
                   key_name = "${module.shared_vars.keypair}"
                   user_date = "${file("assets/userdata.txt")}"
                   security_groups = ["${var.privatesg_id}"]
             }

             resource "aws_autoscaling_group" "asg" {
                   name = "asg_${module.shared_vars.env_suffix}"
                   max_size = 2
                   min_size = 1
                   desired_capacity = 1
                   launch_configuration = "${aws_launch_configuration.as_conf"
                   vpc_zone_identifier = ["${module.shared_vars.publicsubnetid1}"]
                   target_group_arns = ["${var.tg_arn}"]
                    
                   tags = [
                       {
                          key = "Name"
                          value = "asg_${module.shared_vars.env_suffix}"
                          propagate_at_launch = true
                       },
                       {
                          key = "Environment"
                          value = "${module.shared_vars.env_suffix}"
                          propagate_at_launch = true
                       }
                   ]
             }
             
             
